// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RosterTeamAPI.DATA;

#nullable disable

namespace RosterTeamAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241016091832_TeamEmployeetable")]
    partial class TeamEmployeetable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RosterTeamAPI.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("OverTimeHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalWorkHoursDay")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalWorkHoursWeek")
                        .HasColumnType("double precision");

                    b.Property<double>("UsedWorkHoursDay")
                        .HasColumnType("double precision");

                    b.Property<double>("UsedWorkHoursWeek")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeVendorName")
                        .HasColumnType("text");

                    b.Property<double?>("HoursAssigned")
                        .HasColumnType("double precision");

                    b.Property<string>("RepeatEvery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RepeatUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceToBePerformed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalHoursScheduled")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceToBePerformed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalHoursScheduled")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.TeamEmployee", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("TeamId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TeamEmployees");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.SubTask", b =>
                {
                    b.HasOne("RosterTeamAPI.Models.Employee", "Employee")
                        .WithMany("SubTasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RosterTeamAPI.Models.Service", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.TeamEmployee", b =>
                {
                    b.HasOne("RosterTeamAPI.Models.Employee", "Employee")
                        .WithMany("TeamEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RosterTeamAPI.Models.Team", "Team")
                        .WithMany("TeamEmployees")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.Employee", b =>
                {
                    b.Navigation("SubTasks");

                    b.Navigation("TeamEmployees");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.Service", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("RosterTeamAPI.Models.Team", b =>
                {
                    b.Navigation("TeamEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
